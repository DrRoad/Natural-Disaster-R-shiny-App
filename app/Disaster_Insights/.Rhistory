apply(cats[,c(2,3)], 2, mean)
colSums(apply(states[,c(1:8)], 2, function(col_sub) return(col_sub>mean(col_sub))))
new_m_indices <- unlist(mapply(function(element, ind) {return(element[ind])}, split(sprint_m$m_indices, sprint_m$CityDate), min_ind))
?split
state_disaster <- read.csv("us_disaster_by state.csv")
state_disaster$State <- abb2state(state_disaster$State) #Converting to full state names
library(shiny)
library(leaflet)
abb2state <- function(name, convert = F, strict = F){
data(state)
# state data doesn't include DC
state = list()
state[['name']] = c(state.name,"District Of Columbia")
state[['abb']] = c(state.abb,"DC")
if(convert) state[c(1,2)] = state[c(2,1)]
single.a2s <- function(s){
if(strict){
is.in = tolower(state[['abb']]) %in% tolower(s)
ifelse(any(is.in), state[['name']][is.in], NA)
}else{
# To check if input is in state full name or abb
is.in = rapply(state, function(x) tolower(x) %in% tolower(s), how="list")
state[['name']][is.in[[ifelse(any(is.in[['name']]), 'name', 'abb')]]]
}
}
sapply(name, single.a2s)
}
split(state_disaster$State, state_disaster$Incident_Type)
state_disaster <- read.csv("us_disaster_by state.csv")
setwd("~/Documents/Graduate School 2016-2017/MA Graduate Classes/Applied Data Science Ying Liu/Project2_RShiny/Disaster_Test/Disaster_Insights")
state_disaster <- read.csv("us_disaster_by state.csv")
state_disaster$State <- abb2state(state_disaster$State) #Converting to full state names
split(state_disaster$State, state_disaster$Incident_Type)
split(state_disaster$Incident_Type, state_disaster$State)
typeof(state_disaster$State)
split(state_disaster$State, as.factor(state_disaster$Incident_Type))
split(as.factor(state_disaster$State), as.factor(state_disaster$Incident_Type))
split(as.factor(unlist(state_disaster$State)), as.factor(state_disaster$Incident_Type))
split(unlist(state_disaster$State), as.factor(state_disaster$Incident_Type))
split(unlist(state_disaster$Incident_Type), as.factor(unlist(state_disaster$State)))
table(unlist(state_disaster$Incident_Type), as.factor(unlist(state_disaster$State)))
table(unlist(state_disaster$State)
## Begin Def server
shinyServer(function(input, output) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
})
## End Def server
shinyApp(ui, server)
table(unlist(state_disaster$State)
## Begin Def server
shinyServer(function(input, output) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
})
## End Def server
shinyApp(ui, server)
table(unlist(state_disaster$State))
state_disaster <- read.csv("us_disaster_by state.csv")
state_disaster$State <- abb2state(state_disaster$State) #Converting to full state names
table(unlist(state_disaster$State))
split(unlist(state_disaster$State), state_disaster$Declaration_Year)
split(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year))
?table
table(unlist(state_disaster$State, unlist(state_disaster$Declaration_Year)))
table(unlist(state_disaster$State), unlist(state_disaster$Declaration_Year))
split(state_disaster$Declaration_Year, as.factor(unlist(state_disaster$State)))
split(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year))
tapply(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year), table)
ddply(state_disaster, .(State, Disaster_Type), table)
??ddply
library(dplyr)
ddply(state_disaster, .(State, Disaster_Type), table)
ddply(state_disaster, .(State, Disaster_Type), table)
install.packages("dplyr")
library(dplyr)
ddply(state_disaster, .(State, Disaster_Type), table)
library(plyr)
ddply(state_disaster, .(State, Disaster_Type), table)
split(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year))
tapply(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year), table)
tapply(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year), function(lll) table(lll))
tapply(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year), function(lll) table(unlist(lll)))
split(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year))[[1]]
split(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year))[1]
state_disaster <- read.csv("us_disaster_by state.csv")
state_disaster$State <- abb2state(state_disaster$State) #Converting to full state names
table(unlist(state_disaster$State), unlist(state_disaster$Declaration_Year))
split(state_disaster$Declaration_Year, as.factor(unlist(state_disaster$State)))
split(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year))[1]
tapply(unlist(state_disaster$State), as.factor(state_disaster$Declaration_Year), function(lll) table(unlist(lll)))
state_disaster%>%
group_by(Declaration_Year)
state_disaster <- read.csv("us_disaster_by state.csv")
state_disaster$State <- as.vector(abb2state(state_disaster$State)) #Converting to full state names
table(unlist(state_disaster$State), unlist(state_disaster$Declaration_Year))
split(state_disaster$Declaration_Year, as.factor(unlist(state_disaster$State)))
state_disaster%>%
group_by(Declaration_Year)
head(faithful$eruptions)
table(unlist(state_disaster$State))
hist(table(unlist(state_disaster$State)))
state_pop <- read.csv("us_pop_by_state.csv")
head(state_pop)
state_pop <- read.csv("us_pop_by_state.csv")
head(state_pop)
state_disaster <- read.csv("us_disaster_by state.csv")
state_pop <- read.csv("us_pop_by_state.csv")
head(state_pop)
gsub(".", '', ".Alabama", fixed = T)
gsub(".", '', state_pop$State, fixed = T)
state_pop$State <- gsub(".", '', state_pop$State, fixed = T)
head(state_pop)
gsub("X", '', state_pop[1, 2:], fixed = T)
state_pop[1, 2:]
state_pop[1, 2:.]
state_pop[1, ]
state_pop[1, 2:nrow(state_pop)]
state_pop[1, 2:ncol(state_pop)]
colnames(state_pop)[1, 2:ncol(state_pop)]
colnames(state_pop)[2:ncol(state_pop)]
gsub("X", '', colnames(state_pop)[2:ncol(state_pop)], fixed = T)
state_disaster <- read.csv("us_disaster_by state.csv")
state_pop <- read.csv("us_pop_by_state.csv")
state_pop$State <- gsub(".", '', state_pop$State, fixed = T)
colnames(state_pop)[2:ncol(state_pop)] <- gsub("X", '', colnames(state_pop)[2:ncol(state_pop)], fixed = T)
HEAD(state_pop)
head(state_pop)
summary(state_pop)
state_disaster <- read.csv("us_disaster_by state.csv")
state_pop <- read.csv("us_pop_by_state.csv")
state_pop$State <- gsub(".", '', state_pop$State, fixed = T)
colnames(state_pop)[2:ncol(state_pop)] <- gsub("X", '', colnames(state_pop)[2:ncol(state_pop)], fixed = T)
head(state_pop)
summary(state_pop)
unique(state_disaster$Incident_Type)
i<-2010
df <- state_disaster[state_disaster$Declaration_Year==i, ]
df
head(df)
i
table(df$State, df$Incident_Type)
state_disaster <- read.csv("us_disaster_by state.csv")
state_pop <- read.csv("us_pop_by_state.csv")
state_pop$State <- gsub(".", '', state_pop$State, fixed = T)
colnames(state_pop)[2:ncol(state_pop)] <- gsub("X", '', colnames(state_pop)[2:ncol(state_pop)], fixed = T)
state_disaster$State <- as.vector(abb2state(state_disaster$State)) #Converting to full state names
df <- state_disaster[state_disaster$Declaration_Year==i, ]
table(df$State, df$Incident_Type)
head(df)
?distinct
library(dplyr)
?distinct
distinct(state_pop, Declaration_Year)
distinct(state_disaster, Declaration_Year)
distinct(state_disaster, .(Declaration_Year, State, Incident_Type))
distinct(state_disaster, c(Declaration_Year, State, Incident_Type))
duplicated(state_disaster[, c("Declaration_Year", "State", "Incident_Type")])
dup_rows <- duplicated(state_disaster[, c("Declaration_Year", "State", "Incident_Type")])
state_disaster[dup_rows,]
duplicated(state_disaster[, c("Declaration_Year", "State", "Incident_Type")])
head(state_disaster[dup_rows,])
head(state_disaster[-dup_rows,])
head(state_disaster[-dup_rows,])
head(state_disaster[dup_rows,])
head(state_disaster[!dup_rows,])
dup_rows <- duplicated(state_disaster[, c("Declaration_Year", "State", "Title")])
head(state_disaster[!dup_rows,])
head(state_disaster)
tail(state_disaster[!dup_rows,])
unique_state_disaster <- state_disaster[!dup_rows,]
i
df <- state_disaster[unique_state_disaster$Declaration_Year==i, ]
table(df$State, df$Incident_Type)
table(unlist(df$State), unlist(df$Incident_Type))
head(df)
head(unique_state_disaster)
df <- state_disaster[unique_state_disaster$Declaration_Year==i, ]
head(df)
i
df <- state_disaster[as.numeric(unique_state_disaster$Declaration_Year)==i, ]
i
head(df)
as.numeric(unique_state_disaster$Declaration_Year)==i
df
head(df)
table(as.factor(df$State), as.factor(df$Incident_Type))
table(as.factor(unlist(df$State)), as.factor(unlist(df$Incident_Type)))
length(unlist(df$State))
length(unlist(df$Incident_Type))
length(state_disaster$State)
length(state_disaster$Incident_Type)
typeof(dup_rows)
dup_rows
head(state_disaster[!dup_rows,]) #**
head(state_disaster[!dup_rows,1:ncol(state_disaster)]) #**
head(state_disaster[!dup_rows,2:ncol(state_disaster)]) #**
head(state_disaster[!dup_rows,1])
summary(state_disaster)
summary(state_disaster)$State
summary(state_disaster)["State"]
state_disaster$State <- as.vector(as.character(unlist(abb2state(state_disaster$State)))) #Converting to full state names
state_disaster$State <- as.vector(unlist(as.character(abb2state(state_disaster$State)))) #Converting to full state names
summary(state_disaster)
dup_rows <- duplicated(state_disaster[, c("Declaration_Year", "State", "Title")])#**
head(state_disaster[!dup_rows,2:ncol(state_disaster)]) #**
head(state_disaster[!dup_rows,1])
head(state_disaster[!dup_rows,1:ncol(state_disaster)]) #**
head(state_disaster[!dup_rows, 0:ncol(state_disaster)]) #**
summary(state_disaster)
length(state_disaster[!dup_rows,1])
sum(dup_rows)
sum(d!up_rows)
sum(!dup_rows)
length(state_disaster[!dup_rows,1])
state_disaster[, "Declaration_Year"==2010]
state_disaster[, state_disaster$Declaration_Year==2010]
state_disaster[state_disaster$Declaration_Year==2010,]
head(state_disaster[state_disaster$Declaration_Year==2010,])
state_disaster[8783,1]
state_disaster <- read.csv("us_disaster_by state.csv")
state_disaster[8783,1]
abb2state <- function(name, convert = F, strict = F){
data(state)
# state data doesn't include DC
state = list()
state[['name']] = c(state.name,"District Of Columbia", "Virgin Islands")
state[['abb']] = c(state.abb,"DC", "VI")
if(convert) state[c(1,2)] = state[c(2,1)]
single.a2s <- function(s){
if(strict){
is.in = tolower(state[['abb']]) %in% tolower(s)
ifelse(any(is.in), state[['name']][is.in], NA)
}else{
# To check if input is in state full name or abb
is.in = rapply(state, function(x) tolower(x) %in% tolower(s), how="list")
state[['name']][is.in[[ifelse(any(is.in[['name']]), 'name', 'abb')]]]
}
}
sapply(name, single.a2s)
}
state_disaster <- read.csv("us_disaster_by state.csv")
state_disaster$State <- as.vector(unlist(as.character(abb2state(state_disaster$State)))) #Converting to full state names
head(state_disaster[!dup_rows, 1:ncol(state_disaster)]) #**
abb2state <- function(name, convert = F, strict = F){
data(state)
# state data doesn't include DC
state = list()
state[['name']] = c(state.name,"District Of Columbia", "Virgin Islands", "Puerto Rico")
state[['abb']] = c(state.abb,"DC", "VI", "PT")
if(convert) state[c(1,2)] = state[c(2,1)]
single.a2s <- function(s){
if(strict){
is.in = tolower(state[['abb']]) %in% tolower(s)
ifelse(any(is.in), state[['name']][is.in], NA)
}else{
# To check if input is in state full name or abb
is.in = rapply(state, function(x) tolower(x) %in% tolower(s), how="list")
state[['name']][is.in[[ifelse(any(is.in[['name']]), 'name', 'abb')]]]
}
}
sapply(name, single.a2s)
}
state_disaster <- read.csv("us_disaster_by state.csv")
state_disaster$State <- as.vector(unlist(as.character(abb2state(state_disaster$State)))) #Converting to full state names
summary(state_disaster)
head(state_disaster[!dup_rows, 1:ncol(state_disaster)]) #**
abb2state <- function(name, convert = F, strict = F){
data(state)
# state data doesn't include DC
state = list()
state[['name']] = c(state.name,"District Of Columbia", "Virgin Islands", "Puerto Rico")
state[['abb']] = c(state.abb,"DC", "VI", "PR")
if(convert) state[c(1,2)] = state[c(2,1)]
single.a2s <- function(s){
if(strict){
is.in = tolower(state[['abb']]) %in% tolower(s)
ifelse(any(is.in), state[['name']][is.in], NA)
}else{
# To check if input is in state full name or abb
is.in = rapply(state, function(x) tolower(x) %in% tolower(s), how="list")
state[['name']][is.in[[ifelse(any(is.in[['name']]), 'name', 'abb')]]]
}
}
sapply(name, single.a2s)
}
state_disaster <- read.csv("us_disaster_by state.csv")
colnames(state_pop)[2:ncol(state_pop)] <- gsub("X", '', colnames(state_pop)[2:ncol(state_pop)], fixed = T)
state_disaster$State <- as.vector(unlist(as.character(abb2state(state_disaster$State)))) #Converting to full state names
summary(state_disaster)
head(state_disaster[!dup_rows, 1:ncol(state_disaster)]) #**
unique_state_disaster <- state_disaster[!dup_rows,]
df <- state_disaster[as.numeric(unique_state_disaster$Declaration_Year)==i, ]
table(as.factor(unlist(df$State)), as.factor(unlist(df$Incident_Type)))
year_i_table <- table(as.factor(unlist(df$State)), as.factor(unlist(df$Incident_Type)))
as.data.frame.matrix(year_i_table)
year_i_df <- as.data.frame.matrix(year_i_table)
colnames(year_i_df)[1] <- "State"
year_i_df
year_i_df <- as.data.frame(year_i_table)
year_i_df
colnames(year_i_df)
year_i_df <- as.data.frame.matrix(year_i_table)
year_i_df
write.csv(year_i_df, "year_i_df.csv")
clean_state_disaster <- data.frame(0)
state_pop[,i]
state_pop[, colnames(state_pop) = i]
state_pop[, colnames(state_pop) == i]
year_i_df$Population <-
colnames(state_pop) == i
merge(year_i_df, )
colnames(state_pop) == i
which(colnames(state_pop) == i)
state_i_pop_df <- state_pop[, which(colnames(state_pop) == i)]
state_i_pop_df
state_i_pop_df <- state_pop[, c(1, which(colnames(state_pop) == i))]
state_i_pop_df
rownames(year_i_df)
year_i_df$Year <- rep(i, nrow(year_i_df))
year_i_df
year_i_df$State <- rownames(year_i_df)
year_i_df
state_i_pop_df <- state_pop[, c(1, which(colnames(state_pop) == i))]
state_i_pop_df
merge(state_i_pop_df,year_i_df)
clean_state_disaster <- rbind(clean_state_disaster, merged_state_df)
merged_state_df <- merge(state_i_pop_df,year_i_df)
clean_state_disaster <- rbind(clean_state_disaster, merged_state_df)
dim(merged_state_df)
clean_state_disaster <- data.frame(0, 22)
clean_state_disaster
clean_state_disaster <- data.frame()
clean_state_disaster <- rbind(clean_state_disaster, merged_state_df)
clean_state_disaster
for( i in 2010:2016){
df <- state_disaster[as.numeric(unique_state_disaster$Declaration_Year)==i, ]
year_i_table <- table(as.factor(unlist(df$State)), as.factor(unlist(df$Incident_Type)))
year_i_df <- as.data.frame.matrix(year_i_table)
year_i_df$Year <- rep(i, nrow(year_i_df))
year_i_df$State <- rownames(year_i_df)
state_i_pop_df <- state_pop[, c(1, which(colnames(state_pop) == i))]
merged_state_df <- merge(state_i_pop_df,year_i_df)
clean_state_disaster <- rbind(clean_state_disaster, merged_state_df)
}
dim(clean_state_disaster)
i
df <- state_disaster[as.numeric(unique_state_disaster$Declaration_Year)==i, ]
year_i_table <- table(as.factor(unlist(df$State)), as.factor(unlist(df$Incident_Type)))
year_i_df <- as.data.frame.matrix(year_i_table)
year_i_df$Year <- rep(i, nrow(year_i_df))
year_i_df$State <- rownames(year_i_df)
state_i_pop_df <- state_pop[, c(1, which(colnames(state_pop) == i))]
merged_state_df <- merge(state_i_pop_df,year_i_df)
clean_state_disaster <- rbind(clean_state_disaster, merged_state_df)
merged_state_df
clean_state_disaster
dim(clean_state_disaster)
dim(merged_state_df)
unique_state_disaster <- state_disaster[!dup_rows,]
clean_state_disaster <- data.frame()
for( i in 2010:2016){
df <- state_disaster[as.numeric(unique_state_disaster$Declaration_Year)==i, ]
year_i_table <- table(as.factor(unlist(df$State)), as.factor(unlist(df$Incident_Type)))
year_i_df <- as.data.frame.matrix(year_i_table)
year_i_df$Year <- rep(i, nrow(year_i_df))
year_i_df$State <- rownames(year_i_df)
state_i_pop_df <- state_pop[, c(1, which(colnames(state_pop) == i))]
merged_state_df <- merge(state_i_pop_df,year_i_df)
clean_state_disaster <- rbind(clean_state_disaster, merged_state_df)
}
i
colnames(merged_state_df)==colnames(clean_state_disaster)
sum(colnames(merged_state_df)==colnames(clean_state_disaster))
sum(colnames(merged_state_df)!=colnames(clean_state_disaster))
colnames(merged_state_df)[2]
colnames(merged_state_df)[2] <- "Population"
unique_state_disaster <- state_disaster[!dup_rows,]
clean_state_disaster <- data.frame()
for( i in 2010:2016){
df <- state_disaster[as.numeric(unique_state_disaster$Declaration_Year)==i, ]
year_i_table <- table(as.factor(unlist(df$State)), as.factor(unlist(df$Incident_Type)))
year_i_df <- as.data.frame.matrix(year_i_table)
year_i_df$Year <- rep(i, nrow(year_i_df))
year_i_df$State <- rownames(year_i_df)
state_i_pop_df <- state_pop[, c(1, which(colnames(state_pop) == i))]
merged_state_df <- merge(state_i_pop_df,year_i_df)
colnames(merged_state_df)[2] <- "Population"
clean_state_disaster <- rbind(clean_state_disaster, merged_state_df)
}
write.csv(clean_state_disaster, "clean_state_disaster.csv")
disaster <- read.csv("clean_state_disaster.csv")
unique(state_i_pop_df$State)
length(unique(state_i_pop_df$State))
brewer.pal(n = length(unique(state_i_pop_df$State)), name = "Set2")
install.packages("RColorBrewer")
library(RColorBrewer)
brewer.pal(n = length(unique(state_i_pop_df$State)), name = "Set2")
palette(rainbow(length(unique(state_i_pop_df$State))))
data <- read.csv("clean_state_disaster.csv")
runApp()
runApp()
install.packages("googleCharts")
install.packages('googleVis')
library(googleVis)
library(googleCharts)
runApp()
install.packages("googleCharts")
??googleCharts
library(googleVis)
runApp()
??googleChartsInit
install_version("googleCharts", "0.1.0")
??install_version
library(devtools)
install_version("googleCharts", "0.1.0")
if (!require(devtools))
install.packages("devtools")
devtools::install_github("jcheng5/googleCharts")
library(googleCharts)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv("clean_state_disaster.csv")
runApp()
runApp()
runApp()
head(states)
head(state.x77)
states <- data.frame(state.x77, Region = state.region)
head()
head(states)
states[, c(1,9)]
state.region
state.region["Alabama"]
state.region["Northeast"]
state.region["Washington"]
state.name
state.region
state_regions <- data.frame(State = state.name, Region = state.region)
state_regions
unique_state_disaster <- state_disaster[!dup_rows,]
clean_state_disaster <- data.frame()
state_regions <- data.frame(State = state.name, Region = state.region)
for( i in 2010:2016){
df <- state_disaster[as.numeric(unique_state_disaster$Declaration_Year)==i, ]
year_i_table <- table(as.factor(unlist(df$State)), as.factor(unlist(df$Incident_Type)))
year_i_df <- as.data.frame.matrix(year_i_table)
year_i_df$Year <- rep(i, nrow(year_i_df))
year_i_df$State <- rownames(year_i_df)
state_i_pop_df <- state_pop[, c(1, which(colnames(state_pop) == i))]
merged_state_df <- merge(state_i_pop_df,year_i_df)
colnames(merged_state_df)[2] <- "Population"
merged_state_df_final <- merge(merged_state_df, state_regions)
clean_state_disaster <- rbind(clean_state_disaster, merged_state_df_final)
}
write.csv(clean_state_disaster, "clean_state_disaster.csv")
data <- read.csv("clean_state_disaster.csv")
write.csv(clean_state_disaster, "clean_state_disaster.csv")
data <- read.csv("clean_state_disaster.csv")
runApp()
runApp()
runApp()
colnames(data)
runApp()
runApp()
?fluidRow
min(data$Year)
typeof()
typeof(min(data$Year))
runApp()
runApp()
runApp()
runApp()
max(data$Year)
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
Terrorist
